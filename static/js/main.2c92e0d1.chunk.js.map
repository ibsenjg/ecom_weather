{"version":3,"sources":["utils/Fetch.js","app/slices/appSlice.js","components/Search.js","utils/date.js","components/Header.js","components/Item.js","components/List.js","App.js","app/store.js","index.js"],"names":["FetchUrl","args","a","payload","name","fetch","method","body","JSON","stringify","query","headers","request","json","errors","data","err","Error","message","status","appSplice","createSlice","initialState","cities","selectedDay","selectedCity","reducers","setDay","state","setCities","setCity","actions","useStyles","makeStyles","autocomplete","width","root","backgroundColor","marginBottom","borderColor","color","Search","dispatch","useDispatch","classes","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","allCities","Autocomplete","onChange","_","citySelected","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","country","renderInput","params","TextField","placeholder","variant","InputProps","endAdornment","CircularProgress","size","dateString","date","Date","toDateString","undefined","weekday","year","month","day","Header","useSelector","app","filled","current","className","src","alt","Item","id","_id","hourly","temp","min","max","setActiveDay","img","setImg","init","setInit","week","url","find","item","div","initial","opacity","animate","exit","transition","duration","delay","style","pointerEvents","onClick","to","layoutId","background","Math","round","map","hour","Card","bind","Carda","List","selectedId","setWeek","setCurrent","isSelected","Landing","App","firstCity","interval","setInterval","updateCurrentCity","updatedCity","clearInterval","type","path","component","configureStore","reducer","appReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2c92e0d1.chunk.js","sourcesContent":["const FetchUrl = async (args) => {\r\n  const { payload, name } = args;\r\n\r\n  const request = await fetch(\r\n    'https://vast-thicket-28360.herokuapp.com/graphql',\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query: payload,\r\n      }),\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n    }\r\n  );\r\n\r\n  const { errors, data } = await request.json();\r\n  if (errors) {\r\n    const [err] = errors;\r\n    throw new Error(err.message);\r\n  }\r\n  if (request.status !== 200 && request.status !== 201) {\r\n    throw new Error('Something Failed.');\r\n  }\r\n  // console.log(data, data[name]);\r\n  return data[name];\r\n};\r\n\r\nexport default FetchUrl;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSplice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    cities: [],\r\n    selectedDay: null,\r\n    selectedCity: {},\r\n  },\r\n  reducers: {\r\n    setDay: (state, { payload }) => {\r\n      state.selectedDay = payload;\r\n    },\r\n    setCities: (state, { payload }) => {\r\n      state.cities = payload;\r\n    },\r\n    setCity: (state, { payload }) => {\r\n      state.selectedCity = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setDay, setCities, setCity } = appSplice.actions;\r\nexport default appSplice.reducer;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FetchUrl from '../utils/Fetch';\r\nimport { setCities, setCity } from '../app/slices/appSlice';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  autocomplete: {\r\n    width: '100% !important',\r\n  },\r\n  root: {\r\n    '& >div': {\r\n      backgroundColor: 'white',\r\n    },\r\n    width: '100%',\r\n    marginBottom: '1rem',\r\n    '& .Mui-focused fieldset': {\r\n      borderColor: '#232323 !important',\r\n    },\r\n    '& .Mui-focused': {\r\n      color: '#232323',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Search() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n    (async () => {\r\n      const fetchCities = `\r\n      query {\r\n        cities {\r\n          _id\r\n          name\r\n          country\r\n          url\r\n          current {\r\n            _id\r\n            name\r\n            main\r\n            date\r\n            description\r\n            icon\r\n            feels\r\n            clouds\r\n            temp\r\n            min\r\n            max\r\n            pressure\r\n            humidity\r\n            wind\r\n            rain\r\n            uvi\r\n            hourly {\r\n              _id\r\n              main\r\n              hour\r\n              description\r\n              icon\r\n              feels\r\n              temp\r\n              min\r\n              max\r\n            }\r\n          }\r\n          week {\r\n            _id\r\n            name\r\n            main\r\n            date\r\n            description\r\n            icon\r\n            feels\r\n            clouds\r\n            temp\r\n            min\r\n            max\r\n            pressure\r\n            humidity\r\n            wind\r\n            rain\r\n            uvi\r\n            hourly {\r\n              _id\r\n              main\r\n              hour\r\n              description\r\n              icon\r\n              feels\r\n              temp\r\n              min\r\n              max\r\n            }\r\n          }\r\n        }\r\n      }`;\r\n      const allCities = await FetchUrl({\r\n        payload: fetchCities,\r\n        name: 'cities',\r\n      });\r\n      if (active) {\r\n        setOptions(allCities);\r\n      }\r\n      return dispatch(setCities(allCities));\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  const handleSearch = (_, citySelected) => {\r\n    if (citySelected) dispatch(setCity(citySelected));\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      onChange={handleSearch}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={(option) => `${option.name}, ${option.country}`}\r\n      options={options}\r\n      loading={loading}\r\n      classes={{ root: classes.autocomplete }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          classes={{ root: classes.root }}\r\n          placeholder='Search city'\r\n          variant='outlined'\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? (\r\n                  <CircularProgress color='inherit' size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","export const dateString = (date) => {\r\n  const dateOptions = {\r\n    weekday: 'long',\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  };\r\n  const newDate = new Date(date).toDateString(undefined, dateOptions);\r\n\r\n  return newDate;\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport Search from './Search';\r\nimport { dateString } from '../utils/date';\r\n\r\nexport const Header = () => {\r\n  const { selectedCity } = useSelector((state) => state.app);\r\n  const filled = selectedCity && selectedCity.current;\r\n  return (\r\n    <header>\r\n      <div className='relative'>\r\n        <span className='date'>\r\n          {dateString(filled ? selectedCity.current.date : null)}\r\n        </span>\r\n        <h1>{filled ? selectedCity.name : 'Today'}</h1>\r\n        <div className='avatar'>\r\n          <img\r\n            className='card-image'\r\n            src={\r\n              'https://avatars.githubusercontent.com/u/18384611?s=460&u=8ad3dc9582c6e27076bf90890551a2371d619a38&v=4'\r\n            }\r\n            alt='ibsen gitgub page profile'\r\n          />\r\n        </div>\r\n      </div>\r\n      <Search />\r\n    </header>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { motion } from 'framer-motion';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setDay } from '../app/slices/appSlice';\r\nimport { dateString } from '../utils/date';\r\n\r\nexport function Item({ id }) {\r\n  const dispatch = useDispatch();\r\n  const [{ _id, name, date, hourly, temp, min, max }, setActiveDay] = useState(\r\n    {}\r\n  );\r\n  const [img, setImg] = useState('');\r\n  const [init, setInit] = useState(false);\r\n\r\n  const { selectedCity } = useSelector((state) => state.app);\r\n\r\n  useEffect(() => {\r\n    const { week, url, current } = selectedCity;\r\n    let day;\r\n    day = week.find((item) => item._id === id);\r\n    if (!day) {\r\n      day = current;\r\n    }\r\n    setActiveDay(day);\r\n    setImg(url);\r\n    setInit(true);\r\n  }, [selectedCity, id]);\r\n\r\n  if (setInit) {\r\n  }\r\n\r\n  const handleLeaveOverlay = () => {\r\n    dispatch(setDay(null));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {init && (\r\n        <>\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0, transition: { duration: 0.15 } }}\r\n            transition={{ duration: 0.2, delay: 0.15 }}\r\n            style={{ pointerEvents: 'auto' }}\r\n            className='overlay'\r\n            onClick={handleLeaveOverlay}\r\n          >\r\n            <Link to='/' />\r\n          </motion.div>\r\n          <div className='card-content-container open'>\r\n            <motion.div\r\n              className='card-content'\r\n              layoutId={`card-container-${_id}`}\r\n            >\r\n              <motion.div\r\n                className='card-image-container minimal'\r\n                layoutId={`card-image-container-${_id}`}\r\n                style={{ background: `url(${img})` }}\r\n              ></motion.div>\r\n              <motion.div\r\n                className='title-container'\r\n                layoutId={`title-container-${_id}`}\r\n              >\r\n                <span className='category'>{dateString(date)}</span>\r\n                <h2>{name}</h2>\r\n                <div className='temp'>{`${Math.round(temp)}º`}</div>\r\n                <div>\r\n                  <span className='top'>max {`${Math.round(max)}º`} /</span>\r\n                  <span className='top'> min {`${Math.round(min)}º`}</span>\r\n                </div>\r\n              </motion.div>\r\n              <motion.div className='content-container minimal' animate>\r\n                {hourly &&\r\n                  hourly.map(({ _id, hour, temp, min, max }) => (\r\n                    <div key={_id} className='hour-row'>\r\n                      <h4>Hour: {hour}</h4>\r\n                      <h4>Temp {`${Math.round(temp)}º`}</h4>\r\n                      <h4>Max {`${Math.round(max)}º`}</h4>\r\n                      <h4>Min {`${Math.round(min)}º`}</h4>\r\n                    </div>\r\n                  ))}\r\n              </motion.div>\r\n            </motion.div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setDay } from '../app/slices/appSlice';\r\nimport { dateString } from '../utils/date';\r\n\r\nconst Card = ({ _id: id, img, name, date, temp, max, min }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = (id) => {\r\n    dispatch(setDay(id));\r\n  };\r\n\r\n  return (\r\n    <li className={`card`}>\r\n      <div className='card-content-container'>\r\n        <motion.div className='card-content' layoutId={`card-container-${id}`}>\r\n          <motion.div\r\n            className='card-image-container'\r\n            layoutId={`card-image-container-${id}`}\r\n            style={{ background: `url(${img})` }}\r\n          >\r\n            {/* <img className='card-image' src={img} alt='' /> */}\r\n          </motion.div>\r\n          <motion.div\r\n            className='title-container'\r\n            layoutId={`title-container-${id}`}\r\n          >\r\n            <span className='category'>{dateString(date)}</span>\r\n            <h2>{name}</h2>\r\n            <div className='temp'>{`${Math.round(temp)}º`}</div>\r\n            <div>\r\n              <span className='top'>max {`${Math.round(max)}º`} /</span>\r\n              <span className='top'> min {`${Math.round(min)}º`}</span>\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      </div>\r\n      {id && (\r\n        <Link\r\n          to={id}\r\n          className={`card-open-link`}\r\n          onClick={handleClick.bind(this, id)}\r\n        />\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst Carda = ({ _id: id, img, name, date, temp, min, max }) => {\r\n  return (\r\n    <li className={`card`}>\r\n      <div className='card-content-container'>\r\n        <motion.div className='card-content' layoutId={`card-container-${id}`}>\r\n          <motion.div\r\n            className='card-image-container'\r\n            layoutId={`card-image-container-${id}`}\r\n            style={{ background: `url(${img})` }}\r\n          ></motion.div>\r\n          <motion.div\r\n            className='title-container'\r\n            layoutId={`title-container-${id}`}\r\n          >\r\n            <span className='category'>{dateString(date)}</span>\r\n            <h2>Current time</h2>\r\n            <div className='temp'>{`${Math.round(temp)}º`}</div>\r\n            <div>\r\n              <span className='top'>max {`${Math.round(max)}º`} /</span>\r\n              <span className='top'> min {`${Math.round(min)}º`}</span>\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport const List = ({ selectedId }) => {\r\n  const [week, setWeek] = useState([]);\r\n  const [current, setCurrent] = useState([]);\r\n  const [img, setImg] = useState('');\r\n\r\n  const { selectedCity } = useSelector((state) => state.app);\r\n\r\n  useEffect(() => {\r\n    if (selectedCity) {\r\n      const { current, week, url } = selectedCity;\r\n      setWeek(week);\r\n      setCurrent(current);\r\n      setImg(url);\r\n    }\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <ul className='card-list'>\r\n      <>\r\n        {current && (\r\n          <Carda\r\n            {...current}\r\n            img={img}\r\n            isSelected={current._id === selectedId}\r\n          />\r\n        )}\r\n        {week &&\r\n          week.map((day) => (\r\n            <Card\r\n              key={day._id}\r\n              img={img}\r\n              {...day}\r\n              isSelected={day._id === selectedId}\r\n            />\r\n          ))}\r\n      </>\r\n    </ul>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { AnimateSharedLayout, AnimatePresence } from 'framer-motion';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport FetchUrl from './utils/Fetch';\r\nimport { Header } from './components/Header';\r\nimport { Item } from './components/Item';\r\nimport { List } from './components/List';\r\nimport { setCities, setCity } from './app/slices/appSlice';\r\n\r\nconst Landing = () => {\r\n  const { selectedDay } = useSelector((state) => state.app);\r\n\r\n  return (\r\n    <>\r\n      <List selectedId={selectedDay} />\r\n      <AnimatePresence>\r\n        {selectedDay && <Item id={selectedDay} />}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    selectedCity: { _id },\r\n  } = useSelector((state) => state.app);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const fetchCities = `\r\n      query {\r\n        cities {\r\n          _id\r\n          name\r\n          country\r\n          url\r\n          current {\r\n            _id\r\n            name\r\n            main\r\n            date\r\n            description\r\n            icon\r\n            feels\r\n            clouds\r\n            temp\r\n            min\r\n            max\r\n            pressure\r\n            humidity\r\n            wind\r\n            rain\r\n            uvi\r\n            hourly {\r\n              _id\r\n              main\r\n              hour\r\n              description\r\n              icon\r\n              feels\r\n              temp\r\n              min\r\n              max\r\n            }\r\n          }\r\n          week {\r\n            _id\r\n            name\r\n            main\r\n            date\r\n            description\r\n            icon\r\n            feels\r\n            clouds\r\n            temp\r\n            min\r\n            max\r\n            pressure\r\n            humidity\r\n            wind\r\n            rain\r\n            uvi\r\n            hourly {\r\n              _id\r\n              main\r\n              hour\r\n              description\r\n              icon\r\n              feels\r\n              temp\r\n              min\r\n              max\r\n            }\r\n          }\r\n        }\r\n      }`;\r\n      const allCities = await FetchUrl({\r\n        payload: fetchCities,\r\n        name: 'cities',\r\n      });\r\n      const [firstCity] = allCities;\r\n      dispatch(setCity(firstCity));\r\n      return dispatch(setCities(allCities));\r\n    })();\r\n  }, [dispatch]);\r\n\r\n  //Each minute will update the selected and current item, and it will refresh\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      const updateCurrentCity = `\r\n    mutation {\r\n      updateCity(id:\"${_id}\") {\r\n        _id\r\n        name\r\n        country\r\n        url\r\n        current {\r\n          _id\r\n          name\r\n          main\r\n          date\r\n          description\r\n          icon\r\n          feels\r\n          clouds\r\n          temp\r\n          min\r\n          max\r\n          pressure\r\n          humidity\r\n          wind\r\n          rain\r\n          uvi\r\n          hourly {\r\n            _id\r\n            main\r\n            hour\r\n            description\r\n            icon\r\n            feels\r\n            temp\r\n            min\r\n            max\r\n          }\r\n        }\r\n        week {\r\n          _id\r\n          name\r\n          main\r\n          date\r\n          description\r\n          icon\r\n          feels\r\n          clouds\r\n          temp\r\n          min\r\n          max\r\n          pressure\r\n          humidity\r\n          wind\r\n          rain\r\n          uvi\r\n          hourly {\r\n            _id\r\n            main\r\n            hour\r\n            description\r\n            icon\r\n            feels\r\n            temp\r\n            min\r\n            max\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n      const updatedCity = await FetchUrl({\r\n        payload: updateCurrentCity,\r\n        name: 'updateCity',\r\n      });\r\n      dispatch(setCity(updatedCity));\r\n    }, 60000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [_id, dispatch]);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <AnimateSharedLayout type='crossfade'>\r\n        <Header />\r\n        <BrowserRouter>\r\n          <Route path={['/:id', '/']} component={Landing} />\r\n        </BrowserRouter>\r\n      </AnimateSharedLayout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from './slices/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}